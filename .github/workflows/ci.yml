name: CI / Security Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  release-please:
    name: Release Please (semantic versioning)
    runs-on: ubuntu-latest
    permissions:
      contents: write       # create releases/tags
      pull-requests: write  # open/update release PRs
      issues: write         # create/update labels used by Release Please
    steps:
      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          package-name: springboot-role-based-restriction
          token: ${{ secrets.GITHUB_TOKEN }}
  build-and-test:
    name: Build & Test with Gradle
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.appver.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4



      - name: Compute application version
        id: appver
        run: |
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
            VERSION="${GITHUB_REF_NAME#v}"  # strip leading 'v' if present
          else
            VERSION="0.1.0-${GITHUB_RUN_NUMBER}-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Computed version=$VERSION"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Build and run tests
        run: |
          if [ -x ./gradlew ]; then
            ./gradlew clean test jacocoTestReport build -PappVersion=${{ steps.appver.outputs.version }}
          else
            gradle clean test jacocoTestReport build -PappVersion=${{ steps.appver.outputs.version }}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          if-no-files-found: error
          path: |
            build/libs/*.jar
            build/classes/**
            build/reports/**
            build/test-results/**
            build/jacoco/**

  codeql-scan:
    name: Static Code Analysis (CodeQL)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build with CodeQL autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  gitleaks:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code (full history for diff tools)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --prune --tags

      - name: Run Gitleaks (full repo scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --exit-code=1 --report-format=sarif --report-path=results.sarif

  docker-build-and-scan:
    name: Docker Build, Trivy & Scout
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: ${{ vars.SNYK_ORG }}
      APP_VERSION: ${{ needs.build-and-test.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: .

      - name: Verify Boot JAR exists
        run: |
          set -euo pipefail
          echo "Listing workspace after artifact download:"
          ls -la || true
          echo "Searching for Boot JARs..."
          mkdir -p build/libs
          # Find candidate jars anywhere in the workspace
          FOUND_JARS=$(find . -maxdepth 3 -type f -name "*.jar" | tr '\n' ' ')
          echo "Found JARs: $FOUND_JARS"
          # If none in build/libs, try to move a likely boot jar into build/libs
          if [ ! -d build/libs ] || [ -z "$(ls -1 build/libs/*.jar 2>/dev/null)" ]; then
            for f in $FOUND_JARS; do
              # Prefer a bootable Spring Boot jar (contains 'SNAPSHOT' or version)
              if [[ "$f" == *".jar" ]]; then
                cp -v "$f" build/libs/ || true
              fi
            done
          fi
          echo "Final build/libs contents:"
          ls -l build/libs || true
          JAR_COUNT=$(ls build/libs/*.jar 2>/dev/null | wc -l | tr -d ' ')
          if [ "$JAR_COUNT" -eq 0 ]; then
            echo "ERROR: No Boot JAR found after artifact download. Did the upstream build upload it?" >&2
            exit 1
          fi
          echo "Boot JARs ready:"
          ls -1 build/libs/*.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          VERSION="${APP_VERSION}"
          if [ -z "$VERSION" ]; then
            VERSION="0.1.0-${GITHUB_RUN_NUMBER}-$(git rev-parse --short HEAD)"
          fi
          echo "Building image with tag: $VERSION"
          docker build -t demo-app:${VERSION} -t demo-app:latest --build-arg APP_VERSION=${VERSION} .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: demo-app:latest
          format: table
          exit-code: 1
          ignore-unfixed: true

      - name: Trivy SARIF (image)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: demo-app:latest
          format: sarif
          output: trivy-results.sarif
          vuln-type: os,library
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Upload Trivy SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif
          if-no-files-found: ignore

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif


      - name: Set up JDK 21 (for Snyk)
        id: jdk_for_snyk
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Open Source (Gradle) test
        run: |
          snyk test --package-manager=gradle --exclude=test \
            --severity-threshold=high --org="${SNYK_ORG}" \
            --sarif-file-output="snyk-os.sarif" || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG: viplavfauzdar

      - name: Upload Snyk OS SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-os-results
          path: snyk-os.sarif
          if-no-files-found: warn

      - name: Snyk Container test (image)
        run: |
          snyk container test "demo-app:${APP_VERSION}" --file=Dockerfile \
            --sarif-file-output="snyk-container.sarif" || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk Container SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-container-results
          path: snyk-container.sarif
          if-no-files-found: warn

  sonarqube-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: https://sonarcloud.io

    steps:
      - name: Checkout code
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: .

      - name: Debug downloaded build outputs
        if: ${{ env.SONAR_TOKEN != '' }}
        run: |
          echo "Tree of ./build after artifact download:"
          find build -maxdepth 3 -type d -print || true
          ls -R build/classes || true
          ls -l build/reports/jacoco/test || true

      - name: Prepare binaries for Sonar (unpack JAR)
        if: ${{ env.SONAR_TOKEN != '' }}
        run: |
          set -e
          mkdir -p sonar-classes
          if ls build/libs/*.jar >/dev/null 2>&1; then
            echo "Unpacking JARs to sonar-classes/"
            for j in build/libs/*.jar; do
              unzip -o -q "$j" -d sonar-classes
            done
          else
            echo "No JARs found under build/libs. Will fall back to build/classes if present."
          fi
          echo "Prepared class roots:"
          find sonar-classes -maxdepth 2 -type d -print || true
          find build/classes -maxdepth 2 -type d -print || true

      - name: Set up JDK 21
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Ensure compiled classes for Sonar
        if: ${{ env.SONAR_TOKEN != '' }}
        run: |
          set -e
          NEED_BUILD=0
          if [ ! -d build/classes/java/main ]; then
            NEED_BUILD=1
          elif ! find build/classes/java/main -name "*.class" -type f -print -quit | grep -q .; then
            NEED_BUILD=1
          fi
          if [ "$NEED_BUILD" -eq 1 ]; then
            echo "No compiled classes found in artifacts; compiling sources for Sonar..."
            chmod +x ./gradlew || true
            ./gradlew -x test classes jacocoTestReport
          else
            echo "Compiled classes found; skipping compile."
          fi

      - name: SonarCloud Scan
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.projectKey=viplavfauzdar_springboot-role-based-restriction
            -Dsonar.organization=viplavfauzdar
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=sonar-classes,build/classes/java/main
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml

      - name: SonarCloud Quality Gate
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        with:
          pollingTimeoutSec: 600


  # --- AI Threat Review job ---
  ai-threat-review:
    name: AI Threat Review (STRIDE)
    runs-on: self-hosted
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect diff and context
        run: |
          set -e
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            echo "Collecting diff for PR against base: ${{ github.base_ref }}"
            git fetch --no-tags --depth=2 origin ${{ github.base_ref }}
            git diff --unified=0 origin/${{ github.base_ref }}...HEAD > pr.diff || true
          else
            echo "Collecting diff for push (last commit)"
            BASE_COMMIT=$(git rev-parse HEAD~1 2>/dev/null || echo "")
            if [ -n "$BASE_COMMIT" ]; then
              git diff --unified=0 "$BASE_COMMIT"...HEAD > pr.diff || true
            else
              # Initial commit or shallow history
              git show --pretty=medium --stat > pr.diff || true
            fi
          fi
          { [ -f README.md ] && echo "## README.md" && cat README.md; } > ARCH.md || true
          { [ -f DFD.md ] && echo "## DFD.md" && cat DFD.md; } >> ARCH.md || true
          find src/main/java -maxdepth 3 -type f -name "*.java" | sed 's#^\./##' > TREE.txt || true

      - name: Ensure required CLI tools
        shell: bash
        run: |
          set -e
          for bin in curl jq; do
            if ! command -v "$bin" >/dev/null 2>&1; then
              echo "Missing required tool: $bin" >&2
              MISSING=1
            fi
          done
          if [ "${MISSING:-0}" = "1" ]; then
            echo "Please install missing tools on the self-hosted runner (curl, jq)." >&2
            exit 1
          fi

      - name: Verify Ollama + model
        shell: bash
        env:
          OLLAMA_HOST: http://localhost:11434
          OLLAMA_MODEL: gpt-oss-20b
        run: |
          set -euo pipefail
          echo "Checking Ollama at $OLLAMA_HOST ..."
          curl -fsS "$OLLAMA_HOST/api/tags" | jq . >/dev/null
          echo "Ensuring model '$OLLAMA_MODEL' is available..."
          curl -fsS "$OLLAMA_HOST/api/tags" \
            | jq -e --arg m "$OLLAMA_MODEL" '.models[] | select(.name==$m)' >/dev/null \
            || { echo "Model '$OLLAMA_MODEL' is not present. Run:  ollama pull $OLLAMA_MODEL" >&2; exit 1; }

      - name: AI - Threat Review this change (STRIDE) via Ollama
        shell: bash
        env:
          OLLAMA_HOST: http://localhost:11434
          OLLAMA_MODEL: gpt-oss-20b
        run: |
          # Be explicit about errors, but capture responses so we can upload them
          set -uo pipefail

          {
            echo "You are a senior application security architect. Using STRIDE, assess threats introduced by this PR. Return a Markdown report with: Summary, Assets/Trust Boundaries touched, STRIDE table (Threat, Finding, Severity, Evidence), Mitigations, Blockers. Keep it concise and actionable.";
            echo;
            echo "--- BEGIN PR DIFF ---"; cat pr.diff || true; echo "--- END PR DIFF ---";
            echo;
            echo "--- BEGIN ARCH NOTES ---"; cat ARCH.md || true; echo "--- END ARCH NOTES ---";
            echo;
            echo "--- BEGIN TREE (src/main/java) ---"; cat TREE.txt || true; echo "--- END TREE ---";
          } > prompt.txt

          # Build JSON payload for Ollama
          PAYLOAD=$(jq -Rn --rawfile p prompt.txt '{model: env.OLLAMA_MODEL, prompt: $p, stream: false}')

          # Call Ollama and always write a file, capturing HTTP status code
          # (do not -f so we still capture non-2xx bodies)
          HTTP_CODE=$(curl -sS -o ai_final.json -w "%{http_code}" \
            "$OLLAMA_HOST/api/generate" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" || true)

          echo "Ollama HTTP status: $HTTP_CODE"
          echo "---- Ollama raw response (pretty-printed if possible) ----"
          if command -v jq >/dev/null 2>&1; then
            jq . ai_final.json || cat ai_final.json || true
          else
            cat ai_final.json || true
          fi

          # Try to extract the model response. If parsing fails, keep an empty report (will be uploaded for debugging).
          if jq -e '.response' ai_final.json >/dev/null 2>&1; then
            jq -r '.response' ai_final.json > THREAT_REPORT.md || true
          else
            : > THREAT_REPORT.md
            echo "No .response field found in ai_final.json; leaving THREAT_REPORT.md empty for diagnostics." >&2
          fi

          # Never exit here so artifacts can still be uploaded by later steps
          exit 0

      - name: Upload raw Ollama response (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-final-json
          path: ai_final.json
          if-no-files-found: warn

      - name: Upload AI Threat Review Bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-threat-bundle
          if-no-files-found: warn
          path: |
            THREAT_REPORT.md
            prompt.txt
            pr.diff
            ARCH.md
            TREE.txt

      - name: Upload AI Threat Report artifact (push)
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: ai-threat-report
          path: THREAT_REPORT.md
          if-no-files-found: error

      - name: Comment on PR with threat report
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('THREAT_REPORT.md','utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });