name: CI / Security Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  release-please:
    name: Release Please (semantic versioning)
    runs-on: ubuntu-latest
    permissions:
      contents: write       # create releases/tags
      pull-requests: write  # open/update release PRs
    steps:
      - name: Run Release Please
        uses: google-github-actions/release-please-action@v4
        with:
          release-type: simple
          package-name: springboot-role-based-restriction
          token: ${{ secrets.GITHUB_TOKEN }}
  build-and-test:
    name: Build & Test with Gradle
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.appver.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4



      - name: Compute application version
        id: appver
        run: |
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
            VERSION="${GITHUB_REF_NAME#v}"  # strip leading 'v' if present
          else
            VERSION="0.1.0-${GITHUB_RUN_NUMBER}-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Computed version=$VERSION"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Build and run tests
        run: |
          if [ -x ./gradlew ]; then
            ./gradlew clean test jacocoTestReport build -PappVersion=${{ steps.appver.outputs.version }}
          else
            gradle clean test jacocoTestReport build -PappVersion=${{ steps.appver.outputs.version }}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          if-no-files-found: error
          path: |
            build/libs/*.jar
            build/classes/**
            build/reports/**
            build/test-results/**
            build/jacoco/**

  codeql-scan:
    name: Static Code Analysis (CodeQL)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build with CodeQL autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  gitleaks:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code (full history for diff tools)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --prune --tags

      - name: Run Gitleaks (full repo scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          fail: true
          args: detect --redact --exit-code=1 --report-format=sarif --report-path=results.sarif

  docker-build-and-scan:
    name: Docker Build, Trivy & Scout
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: ${{ vars.SNYK_ORG }}
      APP_VERSION: ${{ needs.build-and-test.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: .

      - name: Verify Boot JAR exists
        run: |
          echo "Listing build/libs contents:" && ls -l build/libs || true
          mkdir -p build/libs
          JAR_COUNT=$(ls build/libs/*.jar 2>/dev/null | wc -l | tr -d ' ')
          if [ "$JAR_COUNT" -eq 0 ]; then
            echo "ERROR: No Boot JAR found in build/libs. Did the build succeed upstream?" >&2
            exit 1
          fi
          echo "Boot JARs:" && ls -1 build/libs/*.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          VERSION="${APP_VERSION}"
          if [ -z "$VERSION" ]; then
            VERSION="0.1.0-${GITHUB_RUN_NUMBER}-$(git rev-parse --short HEAD)"
          fi
          echo "Building image with tag: $VERSION"
          docker build -t demo-app:${VERSION} -t demo-app:latest --build-arg APP_VERSION=${VERSION} .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: demo-app:latest
          format: table
          exit-code: 1
          ignore-unfixed: true

      - name: Trivy SARIF (image)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: demo-app:latest
          format: sarif
          output: trivy-results.sarif
          vuln-type: os,library
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Upload Trivy SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif
          if-no-files-found: ignore

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Set up JDK 21 (for Snyk)
        id: jdk_for_snyk
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Install Snyk CLI
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: snyk/actions/setup@master

      - name: Debug Java for Snyk
        if: ${{ env.SNYK_TOKEN != '' }}
        run: |
          echo "JAVA_HOME=${JAVA_HOME}"
          ls -la "${JAVA_HOME}" || true
          which java || true
          java -version

      - name: Snyk Open Source (Gradle) test
        id: snyk_os
        if: ${{ env.SNYK_TOKEN != '' }}
        env:
          JAVA_HOME: ${{ steps.jdk_for_snyk.outputs.path }}
          PATH: ${{ steps.jdk_for_snyk.outputs.path }}/bin:${{ env.PATH }}
        run: |
          set -euo pipefail
          snyk test --all-projects --exclude=test --severity-threshold=high --org=${{ vars.SNYK_ORG }} --sarif-file-output=snyk-os.sarif || true
          if [ -f snyk-os.sarif ]; then
            echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Snyk OS SARIF artifact
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: snyk-os
          path: snyk-os.sarif
          if-no-files-found: ignore

      - name: Snyk Container test (image)
        id: snyk_container
        if: ${{ env.SNYK_TOKEN != '' }}
        env:
          JAVA_HOME: ${{ steps.jdk_for_snyk.outputs.path }}
          PATH: ${{ steps.jdk_for_snyk.outputs.path }}/bin:${{ env.PATH }}
        run: |
          set -euo pipefail
          snyk container test demo-app:latest --file=Dockerfile --severity-threshold=high --org=${{ vars.SNYK_ORG }} --sarif-file-output=snyk-container.sarif || true
          if [ -f snyk-container.sarif ]; then
            echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Snyk Container SARIF artifact
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: snyk-container
          path: snyk-container.sarif
          if-no-files-found: ignore

      - name: Upload Snyk SARIF (Open Source)
        if: ${{ env.SNYK_TOKEN != '' && steps.snyk_os.outputs.sarif_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-os.sarif

      - name: Upload Snyk SARIF (Container)
        if: ${{ env.SNYK_TOKEN != '' && steps.snyk_container.outputs.sarif_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-container.sarif

  sonarqube-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: https://sonarcloud.io

    steps:
      - name: Checkout code
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: .

      - name: Set up JDK 21
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: SonarCloud Scan
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.projectKey=viplavfauzdar_springboot-role-based-restriction
            -Dsonar.organization=viplavfauzdar
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=build/classes/java/main
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml

      - name: SonarCloud Quality Gate
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        with:
          pollingTimeoutSec: 600


# --- AI Threat Review job ---
ai-threat-review:
  name: AI Threat Review (STRIDE)
  runs-on: ubuntu-latest
  if: ${{ github.event_name == 'pull_request' }}
  permissions:
    contents: read
    pull-requests: write

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Collect diff and context
      run: |
        set -e
        git fetch --no-tags --depth=2 origin ${{ github.base_ref }}
        git diff --unified=0 origin/${{ github.base_ref }}...HEAD > pr.diff || true
        { [ -f README.md ] && echo "## README.md" && cat README.md; } > ARCH.md || true
        { [ -f DFD.md ] && echo "## DFD.md" && cat DFD.md; } >> ARCH.md || true
        find src/main/java -maxdepth 3 -type f -name "*.java" | sed 's#^\./##' > TREE.txt || true

    - name: AI: Threat model this change (STRIDE)
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      shell: bash
      run: |
        set -euo pipefail
        {
          echo "You are a senior application security architect. Using STRIDE, assess threats introduced by this PR. Return a Markdown report with: Summary, Assets/Trust Boundaries touched, STRIDE table (Threat, Finding, Severity, Evidence), Mitigations, Blockers. Keep it concise and actionable."
          echo
          echo "--- BEGIN PR DIFF ---"
          cat pr.diff || true
          echo "--- END PR DIFF ---"
          echo
          echo "--- BEGIN ARCH NOTES ---"
          cat ARCH.md || true
          echo "--- END ARCH NOTES ---"
          echo
          echo "--- BEGIN TREE (src/main/java) ---"
          cat TREE.txt || true
          echo "--- END TREE ---"
        } > prompt.txt
        PAYLOAD=$(jq -Rn --slurpfile p prompt.txt \
          '{model:"gpt-4o-mini", input:[{"role":"system","content":"You are a pragmatic AppSec architect. Be precise and prioritize risk."},{"role":"user","content":($p[0])}] }')
        curl -s https://api.openai.com/v1/responses \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD" > ai_final.json
        jq -r '..|.text? // empty' ai_final.json > THREAT_REPORT.md || echo "No output" > THREAT_REPORT.md

    - name: Comment on PR with threat report
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('THREAT_REPORT.md','utf8');
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body
          });